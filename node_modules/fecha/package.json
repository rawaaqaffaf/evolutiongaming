{
  "_args": [
    [
      {
        "raw": "fecha@^4.2.0",
        "scope": null,
        "escapedName": "fecha",
        "name": "fecha",
        "rawSpec": "^4.2.0",
        "spec": ">=4.2.0 <5.0.0",
        "type": "range"
      },
      "C:\\Python27\\EvolutionGamingJS\\node_modules\\logform"
    ]
  ],
  "_from": "fecha@^4.2.0",
  "_hasShrinkwrap": false,
  "_id": "fecha@4.2.0",
  "_location": "/fecha",
  "_nodeVersion": "10.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fecha_4.2.0_1583206254405_0.7640887442715978"
  },
  "_npmUser": {
    "name": "taylorhakes",
    "email": "npm@taylorhakes.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fecha@^4.2.0",
    "scope": null,
    "escapedName": "fecha",
    "name": "fecha",
    "rawSpec": "^4.2.0",
    "spec": ">=4.2.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/logform"
  ],
  "_resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.0.tgz",
  "_shasum": "3ffb6395453e3f3efff850404f0a59b6747f5f41",
  "_shrinkwrap": null,
  "_spec": "fecha@^4.2.0",
  "_where": "C:\\Python27\\EvolutionGamingJS\\node_modules\\logform",
  "author": {
    "name": "Taylor Hakes"
  },
  "bugs": {
    "url": "https://github.com/taylorhakes/fecha/issues"
  },
  "dependencies": {},
  "description": "Date formatting and parsing",
  "devDependencies": {
    "@istanbuljs/nyc-config-typescript": "^1.0.1",
    "@typescript-eslint/eslint-plugin": "^2.14.0",
    "@typescript-eslint/parser": "^2.14.0",
    "eslint": "^6.8.0",
    "eslint-config-prettier": "^6.9.0",
    "nyc": "^15.0.0",
    "painless": "^0.9.7",
    "prettier": "1.19.1",
    "rollup": "^0.59.0",
    "rollup-plugin-sourcemaps": "^0.5.0",
    "rollup-plugin-typescript": "^1.0.1",
    "rollup-plugin-uglify": "^3.0.0",
    "source-map-support": "^0.5.16",
    "ts-node": "^8.5.4",
    "tslib": "^1.10.0",
    "typescript": "^3.7.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-aN3pcx/DSmtyoovUudctc8+6Hl4T+hI9GBBHLjA76jdZl7+b1sgh5g4k+u/GL3dTy1/pnYzKp69FpJ0OicE3Wg==",
    "shasum": "3ffb6395453e3f3efff850404f0a59b6747f5f41",
    "tarball": "https://registry.npmjs.org/fecha/-/fecha-4.2.0.tgz",
    "fileCount": 8,
    "unpackedSize": 48751,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeXc9uCRA9TVsSAnZWagAAmuUQAJfqW4QyV5TbiwkcnPti\n7oZ3RaMzAbVuT0hnOUyydpoKRTyLDT99qrvVu4Z9cTUN0BXuIo9BxnK9SLZ0\nureQQrrpmBTJTYxa5R7X/OCPW2eVuMnO+stXZrT6Hf+pfiIMGHZNYd6RMttF\nqqqYgrNqfOQPaC7qayZlCjkmd4/EC3suc3jpYXCQGJux60KiEQ8EKECl+OKX\nezo8f/ovOkxsLKomNy1ZwSPbI/6aGivcChAqFjHiU/Br6aTOgyrjlAdo5o2U\nOiMBl/BCJUFaRPA9XPCn8DChEdmHkK3R5dQgVRevkASt5SQJcGzRgnimh/Ct\nKS9CcTw9EibUWjQd28J9baUCo4qzx6yxse7Vqq48gbMGfM1GUWS8aiE0xJlz\n2K+JARkGynya62DNzsOsJKdY/3JUdZmaPslL14/7mbHdLOqVoeTxMxHDRtAS\nbZXpjdmMCRQeqJ9fZN0UbIaQxs3Bra35RHQl+NOs2dmfJbILC2war01GCWBv\nX198HFdN3ksrbmrygD7mE8BkvxF0ZpYOo+I4Ij9k6MnSZd6oi63jegLLrYh1\nyHmfoZhBswdfZfO2tuGif3DUnCS4EgCo/IM9dVVMNayHsn8SA6j6mkuUQ9aa\n9KI0uyg3sggv2R2CQnEJNXeyEYLgylLHdNQ+FB4omzqhS+kqMrEVz0m1p45N\nw5BE\r\n=3NRn\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib/fecha.js",
    "lib/fecha.d.ts",
    "lib/fecha.umd.js",
    "dist/fecha.min.js"
  ],
  "gitHead": "91680e4db1415fea33eac878cfd889c80a7b55c7",
  "homepage": "https://github.com/taylorhakes/fecha",
  "keywords": [
    "date",
    "parse",
    "moment",
    "format",
    "fecha",
    "formatting"
  ],
  "license": "MIT",
  "main": "lib/fecha.umd.js",
  "maintainers": [
    {
      "name": "taylorhakes",
      "email": "npm@taylorhakes.com"
    }
  ],
  "module": "lib/fecha.js",
  "name": "fecha",
  "optionalDependencies": {},
  "readme": "# fecha [![Build Status](https://travis-ci.org/taylorhakes/fecha.svg?branch=master)](https://travis-ci.org/taylorhakes/fecha)\n\nLightweight date formatting and parsing (~2KB). Meant to replace parsing and formatting functionality of moment.js.\n\n### NPM\n```\nnpm install fecha --save\n```\n### Yarn\n```\nyarn add fecha\n```\n\n### Fecha vs Moment\n<table class=\"table table-striped table-bordered\">\n  <tbody>\n    <tr>\n      <th></th>\n      <th>Fecha</th>\n      <th>Moment</th>\n    </tr>\n    <tr>\n      <td><b>Size (Min. and Gzipped)</b></td>\n      <td>2.1KBs</td>\n      <td>13.1KBs</td>\n    </tr>\n    <tr>\n      <td><b>Date Parsing</b></td>\n      <td>&#x2713;</td>\n      <td>&#x2713;</td>\n    </tr>\n    <tr>\n      <td><b>Date Formatting</b></td>\n      <td>&#x2713;</td>\n      <td>&#x2713;</td>\n    </tr>\n    <tr>\n      <td><b>Date Manipulation</b></td>\n      <td></td>\n      <td>&#x2713;</td>\n    </tr>\n    <tr>\n      <td><b>I18n Support</b></td>\n      <td>&#x2713;</td>\n      <td>&#x2713;</td>\n    </tr>\n  </tbody>\n</table>\n\n## Use it\n\n#### Formatting\n`format` accepts a Date object (or timestamp) and a string format and returns a formatted string. See below for\navailable format tokens.\n\nNote: `format` will throw an error when passed invalid parameters\n```js\nimport { format } from 'fecha';\n\ntype format = (date: Date, format?: string, i18n?: I18nSettings) => str;\n\n// Custom formats\nformat(new Date(2015, 10, 20), 'dddd MMMM Do, YYYY'); // 'Friday November 20th, 2015'\nformat(new Date(1998, 5, 3, 15, 23, 10, 350), 'YYYY-MM-DD hh:mm:ss.SSS A'); // '1998-06-03 03:23:10.350 PM'\n\n// Named masks\nformat(new Date(2015, 10, 20), 'isoDate'); // '2015-11-20'\nformat(new Date(2015, 10, 20), 'mediumDate'); // 'Nov 20, 2015'\nformat(new Date(2015, 10, 20, 3, 2, 1), 'isoDateTime'); // '2015-11-20T03:02:01-05:00'\nformat(new Date(2015, 2, 10, 5, 30, 20), 'shortTime'); // '05:30'\n\n// Literals\nformat(new Date(2001, 2, 5, 6, 7, 2, 5), '[on] MM-DD-YYYY [at] HH:mm'); // 'on 03-05-2001 at 06:07'\n```\n\n#### Parsing\n`parse` accepts a Date string and a string format and returns a Date object. See below for available format tokens. \n\n*NOTE*: `parse` will throw an error when passed invalid string format or missing format. You MUST specify a format.\n```js\nimport { parse } from 'fecha';\n\ntype parse = (dateStr: string, format: string, i18n?: I18nSettingsOptional) => Date|null;\n\n// Custom formats\nparse('February 3rd, 2014', 'MMMM Do, YYYY'); // new Date(2014, 1, 3)\nparse('10-12-10 14:11:12', 'YY-MM-DD HH:mm:ss'); // new Date(2010, 11, 10, 14, 11, 12)\n\n// Named masks\nparse('5/3/98', 'shortDate'); // new Date(1998, 4, 3)\nparse('November 4, 2005', 'longDate'); // new Date(2005, 10, 4)\nparse('2015-11-20T03:02:01-05:00', 'isoDateTime'); // new Date(2015, 10, 20, 3, 2, 1)\n\n// Override i18n\nparse('4 de octubre de 1983', 'M de MMMM de YYYY', {\n  monthNames: [\n    'enero',\n    'febrero',\n    'marzo',\n    'abril',\n    'mayo',\n    'junio',\n    'julio',\n    'agosto',\n    'septiembre',\n    'octubre',\n    'noviembre',\n    'diciembre'\n  ]\n}); // new Date(1983, 9, 4)\n```\n\n#### i18n Support\n```js\nimport {setGlobalDateI18n} from 'fecha';\n\n/*\nDefault I18n Settings\n{\n  dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n  dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  amPm: ['am', 'pm'],\n  // D is the day of the month, function returns something like...  3rd or 11th\n  DoFn(dayOfMonth) {\n    return dayOfMonth + [ 'th', 'st', 'nd', 'rd' ][ dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10) * dayOfMonth % 10 ];\n  }\n}\n*/\n\nsetGlobalDateI18n({\n  dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n  dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  amPm: ['am', 'pm'],\n  // D is the day of the month, function returns something like...  3rd or 11th\n  DoFn: function (D) {\n    return D + [ 'th', 'st', 'nd', 'rd' ][ D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10 ];\n  }\n});\n\n```\n\n#### Custom Named Masks\n```js\nimport { format, setGlobalDateMasks } from 'fecha';\n/*\nDefault global masks\n{\n  default: 'ddd MMM DD YYYY HH:mm:ss',\n  shortDate: 'M/D/YY',\n  mediumDate: 'MMM D, YYYY',\n  longDate: 'MMMM D, YYYY',\n  fullDate: 'dddd, MMMM D, YYYY',\n  shortTime: 'HH:mm',\n  mediumTime: 'HH:mm:ss',\n  longTime: 'HH:mm:ss.SSS'\n}\n*/\n\n// Create a new mask\nsetGlobalDateMasks({\n  myMask: 'HH:mm:ss YY/MM/DD';\n});\n\n// Use it\nformat(new Date(2014, 5, 6, 14, 10, 45), 'myMask'); // '14:10:45 14/06/06'\n```\n\n### Formatting Tokens\n<table class=\"table table-striped table-bordered\">\n  <tbody>\n    <tr>\n      <th></th>\n      <th>Token</th>\n      <th>Output</th>\n    </tr>\n    <tr>\n      <td><b>Month</b></td>\n      <td>M</td>\n      <td>1 2 ... 11 12</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>MM</td>\n      <td>01 02 ... 11 12</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>MMM</td>\n      <td>Jan Feb ... Nov Dec</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>MMMM</td>\n      <td>January February ... November December</td>\n    </tr>\n    <tr>\n      <td><b>Day of Month</b></td>\n      <td>D</td>\n      <td>1 2 ... 30 31</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>Do</td>\n      <td>1st 2nd ... 30th 31st</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>DD</td>\n      <td>01 02 ... 30 31</td>\n    </tr>\n    <tr>\n      <td><b>Day of Week</b></td>\n      <td>d</td>\n      <td>0 1 ... 5 6</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>ddd</td>\n      <td>Sun Mon ... Fri Sat</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>dddd</td>\n      <td>Sunday Monday ... Friday Saturday</td>\n    </tr>\n    <tr>\n      <td><b>Year</b></td>\n      <td>YY</td>\n      <td>70 71 ... 29 30</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>YYYY</td>\n      <td>1970 1971 ... 2029 2030</td>\n    </tr>\n    <tr>\n      <td><b>AM/PM</b></td>\n      <td>A</td>\n      <td>AM PM</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>a</td>\n      <td>am pm</td>\n    </tr>\n    <tr>\n      <td><b>Hour</b></td>\n      <td>H</td>\n      <td>0 1 ... 22 23</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>HH</td>\n      <td>00 01 ... 22 23</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>h</td>\n      <td>1 2 ... 11 12</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>hh</td>\n      <td>01 02 ... 11 12</td>\n    </tr>\n    <tr>\n      <td><b>Minute</b></td>\n      <td>m</td>\n      <td>0 1 ... 58 59</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>mm</td>\n      <td>00 01 ... 58 59</td>\n    </tr>\n    <tr>\n      <td><b>Second</b></td>\n      <td>s</td>\n      <td>0 1 ... 58 59</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>ss</td>\n      <td>00 01 ... 58 59</td>\n    </tr>\n    <tr>\n      <td><b>Fractional Second</b></td>\n      <td>S</td>\n      <td>0 1 ... 8 9</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>SS</td>\n      <td>0 1 ... 98 99</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>SSS</td>\n      <td>0 1 ... 998 999</td>\n    </tr>\n    <tr>\n      <td><b>Timezone</b></td>\n      <td>Z</td>\n      <td>\n        -07:00 -06:00 ... +06:00 +07:00\n      </td>\n    </tr>\n    <tr>\n      <td><b></b></td>\n      <td>ZZ</td>\n      <td>\n        -0700 -0600 ... +0600 +0700\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://taylorhakes@github.com/taylorhakes/fecha.git"
  },
  "scripts": {
    "build": "NODE_ENV=production rollup -c --sourcemap && tsc",
    "format": "prettier --write *.js src/*.ts",
    "test": "prettier --check *.js src/*.ts && eslint --ext .ts src && npm run build && nyc --cache --reporter=text ts-node test.js",
    "test-only": "ts-node test.js"
  },
  "types": "lib/fecha.d.ts",
  "version": "4.2.0"
}
