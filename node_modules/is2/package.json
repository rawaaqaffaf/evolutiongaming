{
  "_args": [
    [
      {
        "raw": "is2@2.0.1",
        "scope": null,
        "escapedName": "is2",
        "name": "is2",
        "rawSpec": "2.0.1",
        "spec": "2.0.1",
        "type": "version"
      },
      "C:\\Python27\\EvolutionGamingJS\\node_modules\\tcp-port-used"
    ]
  ],
  "_from": "is2@2.0.1",
  "_hasShrinkwrap": false,
  "_id": "is2@2.0.1",
  "_location": "/is2",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/is2_2.0.1_1519688841489_0.5927923725303346"
  },
  "_npmUser": {
    "name": "stdarg",
    "email": "edmond@stdarg.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "is2@2.0.1",
    "scope": null,
    "escapedName": "is2",
    "name": "is2",
    "rawSpec": "2.0.1",
    "spec": "2.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/tcp-port-used"
  ],
  "_resolved": "https://registry.npmjs.org/is2/-/is2-2.0.1.tgz",
  "_shasum": "8ac355644840921ce435d94f05d3a94634d3481a",
  "_shrinkwrap": null,
  "_spec": "is2@2.0.1",
  "_where": "C:\\Python27\\EvolutionGamingJS\\node_modules\\tcp-port-used",
  "author": {
    "name": "Enrico Marino",
    "email": "enrico.marino@email.com"
  },
  "bugs": {
    "url": "http://github.com/stdarg/is/issues"
  },
  "dependencies": {
    "deep-is": "^0.1.3",
    "ip-regex": "^2.1.0",
    "is-url": "^1.2.2"
  },
  "description": "A type checking library where each exported function returns either true or false and does not throw. Also added tests.",
  "devDependencies": {
    "jsdom": "0.5.0",
    "mocha": "5.0.1",
    "mongodb": "3.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-+WaJvnaA7aJySz2q/8sLjMb2Mw14KTplHmSwcSpZ/fWJPkUmqw3YTzSWbPJ7OAwRvdYTWF2Wg+yYJ1AdP5Z8CA==",
    "shasum": "8ac355644840921ce435d94f05d3a94634d3481a",
    "tarball": "https://registry.npmjs.org/is2/-/is2-2.0.1.tgz",
    "fileCount": 6,
    "unpackedSize": 122237
  },
  "engines": {
    "node": ">=v0.10.0"
  },
  "gitHead": "e933412ea839de4366608ab214711c20d6465e26",
  "homepage": "http://github.com/stdarg/is2",
  "keywords": [
    "type",
    "check",
    "checker",
    "checking",
    "utilities",
    "network",
    "networking",
    "credit",
    "card",
    "validation"
  ],
  "license": "MIT",
  "main": "./index.js",
  "maintainers": "Edmond Meinfelder <edmond@stdarg.com>, Chris Oyler <christopher.oyler@gmail.com>",
  "name": "is2",
  "optionalDependencies": {},
  "readme": "is2\n===\nis2 is a type-checking module for JavaScript to test values. Is does not throw\nexceptions and every function only returns true or false. Use is2 to validate\ntypes in your node.js code. Every function in is2 returns either true of false.\n\n## Installation\nTo install is2, type:\n\n  $ npm install is2\n\n## Usage\n\n    const is = require('is2');\n\n    console.log(`1===1 is: ${is.equal(true, 1===1)}`);\n    console.log(`10 is a positive number: ${is.positiveNumber(10)}`);\n    console.log(`11 is an odd number: ${is.oddNumber(11)}`);\n\n## API\n\nEach function returns true or false. The names after the '-' are aliases, which\nprovide brevity.\n\nEnvironment:\n\n* is.browser()\n* is.defined(val) - is.def\n* is.nodejs() - is.node()\n* is.undefined(val) - is.udef, is.undef\n\nTypes:\n\n* is.array(val) - is.ary, is.arry\n* is.arrayLike(val) - is.arryLike, is.aryLike, is.arrLike\n* is.arguments(val) - is.args\n* is.boolean(val) - is.bool\n* is.buffer(val) - is.buf, is.buff\n* is.date(val)\n* is.error(val) - is.err\n* is.false(val)\n* is.function(val) - is.funct, is.fun\n* is.mongoId - is.objectId, is.objId\n* is.null(val)\n* is.nullOrUndefined(val) - is.nullOrUndef\n* is.number(val) - is.num\n* is.object(val) - is.obj\n* is.regExp(val) - is.regexp, is.re\n* is.string(val) - is.str\n* is.true(val)\n* is.uuid(val)\n\nRelationships:\n\n* is.equal(val, other) - is.eq, is.objEquals\n* is.hosted(val, host)\n* is.instanceOf(val, constructor) - is.instOf, is.instanceof\n* is.matching(val1, val2 [, val3, ...]) - is.match : true if the first arument\n  is strictly equal to any of the subsequent args.\n* is.objectInstanceof(obj, objType) - is.instOf, is.instanceOf, is.objInstOf, is.objectInstanceOf\n* is.type(val, type) - is.a\n* is.enumerator(val, array) - is.enum, is.inArray\n\nObject State:\n\n* is.empty(val)\n* is.emptyArguments(val) - is.emptyArgs, is.noArgs\n* is.emptyArray(val) - is.emptyArry, is.emptyAry, is.emptyArray\n* is.emptyArrayLike(val) - is.emptyArrLike\n* is.emptyString(val) - is.emptyStr\n* is.nonEmptyArray(val) - is.nonEmptyArry, is.nonEmptyAry\n* is.nonEmptyObject(val) - is.nonEmptyObj\n* is.emptyObject(val) - is.emptyObj\n* is.nonEmptyString(val) - is.nonEmptyStr\n\nNumeric Types within Number:\n\n* is.even(val) - is.evenNum, is.evenNumber\n* is.decimal(val) - is.decNum, is.dec\n* is.integer(val) - is.int\n* is.notANumber(val) - is.nan, is.notANum\n* is.odd(val) - is.oddNum, is.oddNumber\n\nNumeric Type and State:\n\n* is.positiveNumber(val) - is.pos, is.positive, is.posNum, is.positiveNum\n* is.negativeNumber(val) - is.neg,  is.negNum,  is.negativeNum,  is.negativeNumber\n* is.negativeInteger(val) - is.negativeInt, is.negInt\n* is.positiveInteger(val) - is.posInt, is.positiveInt\n\nNumeric Relationship:\n\n* is.divisibleBy(val, other) - is.divisBy, is.divBy\n* is.greaterOrEqualTo(val, other) - is.ge, is.greaterOrEqual\n* is.greaterThan(val, other) - is.gt\n* is.lessThanOrEqualTo(val, other) - is.lessThanOrEq, is.lessThanOrEqual, is.le\n* is.lessThan(val, other) - is.lt\n* is.maximum(val, array) - is.max\n* is.minimum(val, array) - is.min\n* is.withIn(val, start, finish) - is.within\n* is.prettyClose(val, comp, precision) - is.closish, is.near\n\nNetworking:\n\n* is.dnsAddress(val) - is.dnsAddr, is.dns\n* is.emailAddress(val) - is.email, is.emailAddr\n* is.ipv4Address(val) - is.ipv4, is.ipv4Addr\n* is.ipv6Address(val) - is.ipv6, is.ipv6Addr\n* is.ipAddress(val) - is.ip, is.ipAddr\n* is.hostAddress(val) - is.host = is.hostIp = is.hostAddr\n* is.port(val)\n* is.systemPort(val) - is.sysPort\n* is.url(val) - is.uri\n* is.userPort(val)\n\nCredit Cards:\n\n* is.creditCardNumber(str) - is.creditCard, is.creditCardNum\n* is.americanExpressCardNumber(str) - is.amexCardNum, is.amexCard\n* is.chinaUnionPayCardNumber(str) - is.chinaUnionPayCard, is.chinaUnion\n* is.dankortCardNumber(str) - is.dankortCard, is.dankort\n* is.dinersClubCarteBlancheCardNumber(str) - is.dinersClubCarteBlancheCard,\n  is.dinersClubCB\n* is.dinersClubInternationalCardNumber(str) - is.dinersClubInternationalCard,\n  is.dinersClubInt\n* is.dinersClubUSACanadaCardNumber(str) - is.dinersClubUSACanCard, is.dinersClub\n* is.discoverCardNumber(str) - is.discoverCard, is.discover\n* is.instaPaymentCardNumber(str) - is.instaPayment\n* is.jcbCardNumber(str) - is.jcbCard, is.jcb\n* is.laserCardNumber(str) - is.laserCard, is.laser\n* is.maestroCardNumber(str) - is.maestroCard, is.maestro\n* is.masterCardCardNumber - is.masterCardCard, is.masterCard\n* is.visaCardNumber(str) - is.visaCard, is.visa\n* is.visaElectronCardNumber(str) - is.visaElectronCard, is.visaElectron\n\nPersonal information:\n\n* is.streetAddress(str) - is.street, is.address\n* is.zipCode(str) - is.zip\n* is.phoneNumber(str) - is.phone\n\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2013,2014 Edmond Meinfelder\nCopyright (c) 2011 Enrico Marino\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/stdarg/is2.git"
  },
  "scripts": {
    "test": "mocha -C --reporter list tests.js"
  },
  "tags": [
    "type",
    "check",
    "checker",
    "checking",
    "utilities",
    "network",
    "networking",
    "credit",
    "card",
    "validation"
  ],
  "version": "2.0.1"
}
