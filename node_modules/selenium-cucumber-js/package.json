{
  "_args": [
    [
      {
        "raw": "selenium-cucumber-js",
        "scope": null,
        "escapedName": "selenium-cucumber-js",
        "name": "selenium-cucumber-js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Python27\\EvolutionGamingJS"
    ]
  ],
  "_from": "selenium-cucumber-js",
  "_hasShrinkwrap": false,
  "_id": "selenium-cucumber-js@1.7.1",
  "_location": "/selenium-cucumber-js",
  "_nodeVersion": "11.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/selenium-cucumber-js_1.7.1_1590593102366_0.15624443657303844"
  },
  "_npmUser": {
    "name": "john-doherty",
    "email": "contact@johndoherty.info"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {
    "env-paths": "1.0.0",
    "es6-promise": "4.2.8",
    "extract-zip": "1.7.0",
    "graceful-fs": "4.2.4",
    "home-path": "1.0.7",
    "jszip": "3.5.0",
    "klaw": "1.3.1",
    "minimist": "1.2.5",
    "nugget": "2.0.1",
    "path-is-absolute": "1.0.1",
    "pinkie-promise": "2.0.1",
    "rc": "1.2.8",
    "rimraf": "2.7.1",
    "semver": "5.7.1",
    "tmp": "0.0.30",
    "universalify": "0.1.2",
    "xml2js": "0.4.23"
  },
  "_requested": {
    "raw": "selenium-cucumber-js",
    "scope": null,
    "escapedName": "selenium-cucumber-js",
    "name": "selenium-cucumber-js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/selenium-cucumber-js/-/selenium-cucumber-js-1.7.1.tgz",
  "_shasum": "f061a1479cc6e5b0375b11307df53a70dace55b5",
  "_shrinkwrap": null,
  "_spec": "selenium-cucumber-js",
  "_where": "C:\\Python27\\EvolutionGamingJS",
  "author": {
    "name": "John Doherty",
    "email": "contact@johndoherty.info",
    "url": "https://courseof.life/johndoherty"
  },
  "bugs": {
    "url": "https://github.com/john-doherty/selenium-cucumber-js/issues"
  },
  "dependencies": {
    "chai": "3.5.0",
    "chalk": "1.1.3",
    "chromedriver": "^76.0.0",
    "commander": "2.9.0",
    "cucumber": "1.3.3",
    "cucumber-html-reporter": "4.0.4",
    "cucumber-junit": "1.6.0",
    "electron": "^1.8.8",
    "electron-chromedriver": "^1.7.1",
    "electron-packager": "^9.1.0",
    "electron-prebuilt": "^1.4.13",
    "eyes.selenium": "0.0.72",
    "fs-plus": "2.9.1",
    "geckodriver": "^1.16.2",
    "merge": "^1.2.1",
    "phantomjs-prebuilt": "2.1.12",
    "require-dir": "0.3.2",
    "selenium-webdriver": "3.5.0"
  },
  "description": "JavaScript browser automation framework using official selenium-webdriver and cucumber-js",
  "devDependencies": {
    "eslint": "^3.19.0",
    "eslint-config-airbnb-base": "^11.2.0",
    "eslint-plugin-import": "^2.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-sfI7nK4N0qF1tfo3c8fGSg9xG18grNWrpA/VBi2MA2sEvjBpjAcIrOamcl0v1NYsvsHwysR3MSuOJ4D3cI6+eQ==",
    "shasum": "f061a1479cc6e5b0375b11307df53a70dace55b5",
    "tarball": "https://registry.npmjs.org/selenium-cucumber-js/-/selenium-cucumber-js-1.7.1.tgz",
    "fileCount": 22,
    "unpackedSize": 134116,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJezoZOCRA9TVsSAnZWagAA7HwP/jkRO2dRaSSqggQXvH8m\nPsi/eXGCJ3U113962WT7dlMcQMAyry/MspY+5vO2+KQkT55E3THyMuCr9iEg\njSB1ru5G7Cj2lXmBr0JH1a+hwGmisAjsLmB3qC7dNcHkv9SQiLdeqXlbObgl\niPu8lqI79wcMdJjvHAlYuzXwMjGUEsgiKpYN9m+xryDVr0jZ2nmdcTQlklxQ\nNQxhp9eVuDx+iJSbkYPrsoiLdjITei4DnMFAhiFXQQ5RCqi01C5FgHpzvLaf\nuyAx4dDwcwap6mFgLpIMTnap9QaOVwjUc1hD2y0znvBzmfCe2RBgWflmtY8j\nu8amqJbuQSFondWaJO9W5qyMmdXdO1fcBfVy+BjB/1JTziO+qNNmTJUntzt3\n9kvmtx3SFfi6xIjS94XSh+PqvII/x40DTSdn4lsv+5qF4jPztoOOg84MtTN0\nE0qegGQVn6vSAt6LWbgyPbqLFkQhKWwRUDx5VA6O7jasEpkLolWo7EIP6jG/\nseyl4oveamsqmpTyzGwbrIZNImwdwi6u+NR0qGOE03NVpjrenz+ea/kQoY7O\n6RbBa3+a5Rq4aFuPsYxXcpU96v6QhgTKW/anUI0c7qQZV2JvPHz1ijQ5G/TQ\ny8UYubE/TalsY+iiJKLtUE4OhJkDAgTivlLJicWxSvN4cF9G4ceEs48G4Q3i\neGtJ\r\n=seRZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engineStrict": true,
  "engines": {
    "node": ">=6.11.0"
  },
  "eslintConfig": {
    "extends": "airbnb-base",
    "env": {
      "es6": false,
      "browser": true
    },
    "globals": {
      "selenium": true,
      "helpers": true,
      "page": true,
      "driver": true,
      "until": true,
      "by": true,
      "expect": true,
      "Promise": true,
      "browserName": true,
      "DEFAULT_TIMEOUT": true
    },
    "rules": {
      "brace-style": [
        "error",
        "stroustrup"
      ],
      "comma-dangle": [
        "error",
        "never"
      ],
      "func-names": 0,
      "indent": [
        "error",
        4,
        {
          "SwitchCase": 1
        }
      ],
      "max-len": [
        2,
        180,
        4,
        {
          "ignoreUrls": true,
          "ignoreComments": false
        }
      ],
      "new-cap": [
        "error",
        {
          "capIsNewExceptions": [
            "Router",
            "ObjectId",
            "DEBUG"
          ],
          "properties": false
        }
      ],
      "no-underscore-dangle": 0,
      "no-unused-vars": [
        "warn"
      ],
      "no-use-before-define": [
        "error",
        {
          "functions": false
        }
      ],
      "no-var": [
        "off"
      ],
      "one-var": [
        "off"
      ],
      "vars-on-top": [
        "off"
      ],
      "no-param-reassign": [
        "off"
      ],
      "no-lone-blocks": [
        "off"
      ],
      "padded-blocks": 0,
      "prefer-template": [
        "off"
      ],
      "prefer-arrow-callback": [
        "off"
      ],
      "default-case": [
        "off"
      ],
      "wrap-iife": [
        2,
        "inside"
      ],
      "no-plusplus": [
        "off"
      ],
      "require-jsdoc": [
        "warn",
        {
          "require": {
            "FunctionDeclaration": true,
            "MethodDefinition": true,
            "ClassDeclaration": true
          }
        }
      ],
      "object-shorthand": [
        "error",
        "never"
      ],
      "space-before-function-paren": "off",
      "strict": "off",
      "valid-jsdoc": [
        "error"
      ]
    }
  },
  "gitHead": "23d40df5cd1413a163824263b18af55e2c88aeaa",
  "homepage": "https://github.com/john-doherty/selenium-cucumber-js#readme",
  "keywords": [
    "selenium",
    "selenium bdd",
    "cucumber",
    "cucumber-js",
    "webdriver",
    "selenium-webdriver",
    "chromedriver",
    "phantomjs",
    "testing",
    "junit",
    "bdd"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "john-doherty",
      "email": "contact@johndoherty.info"
    }
  ],
  "name": "selenium-cucumber-js",
  "optionalDependencies": {},
  "readme": "# selenium-cucumber-js\n\n[![Shippable branch](https://img.shields.io/shippable/5818b23bbd56670e00037040/master.svg)](https://app.shippable.com/projects/5818b23bbd56670e00037040) [![npm](https://img.shields.io/npm/dt/selenium-cucumber-js.svg)](https://www.npmjs.com/package/selenium-cucumber-js)\n\nJavaScript browser automation framework using official [selenium-webdriver](http://seleniumhq.github.io/selenium/docs/api/javascript/ \"view webdriver js documentation\") and [cucumber-js](https://github.com/cucumber/cucumber-js \"view cucumber js documentation\").\n\n**Table of Contents**\n\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Options](#options)\n    * [Configuration file](#configuration-file)\n  * [Feature files](#feature-files)\n  * [Step definitions](#step-definitions)\n  * [Page objects](#page-objects)\n  * [Shared objects](#shared-objects)\n  * [Helpers](#helpers)\n  * [Visual Comparison](#visual-comparison)\n  * [Before/After hooks](#beforeafter-hooks)\n  * [Reports](#reports)\n  * [How to debug](#how-to-debug)\n  * [Directory structure](#directory-structure)\n* [Demo](#demo)\n* [Bugs](#bugs)\n* [Contributing](#contributing)\n* [Troubleshooting](#troubleshooting)\n  * [IntelliJ Cucumber Plugin](#intellij-cucumber-plugin)\n\n## Installation\n\n```bash\nnpm install selenium-cucumber-js --save-dev\n```\n\n## Usage\n\n```bash\nnode ./node_modules/selenium-cucumber-js/index.js -s ./step-definitions\n```\n\n### Options\n\n```bash\n-h, --help                          output usage information\n-V, --version                       output the version number\n-s, --steps <path>                  path to step definitions. defaults to ./step-definitions\n-p, --pageObjects <path>            path to page objects. defaults to ./page-objects\n-o, --sharedObjects [paths]         path to shared objects (repeatable). defaults to ./shared-objects\n-b, --browser <path>                name of browser to use. defaults to chrome\n-k, --browser-teardown <optional>   browser teardown strategy after every scenario (always, clear, none). defaults to \"always\"\n-r, --reports <path>                output path to save reports. defaults to ./reports\n-d, --disableLaunchReport           disable the auto opening the browser with test report\n-j, --junit <path>                  output path to save junit-report.xml defaults to ./reports\n-t, --tags <tagName>                name of tag to run\n-f, --featureFile <path>            a specific feature file to run\n-x, --timeOut <n>                   steps definition timeout in milliseconds. defaults to 10 seconds\n-n, --noScreenshot                  disable auto capturing of screenshots when an error is encountered\n```\n\nBy default tests are run using Google Chrome, to run tests using another browser supply the name of that browser along with the `-b` switch. Available options are:\n\nBrowser    | Example\n---------- | ---------------\nChrome     | `-b chrome`\nFirefox    | `-b firefox`\nPhantom JS | `-b phantomjs`\nElectron   | `-b electron`\nCustom     | `-b customDriver.js`\n\nTo use your own driver, create a customDriver.js file in the root of your project and provide the filename with the `-b` switch.\n\n#### Configuration file\n\nConfiguration options can be set using a `selenium-cucumber-js.json` file at the root of your project. The JSON keys use the \"long name\" from the command line options. For example the following duplicates default configuration:\n\n```json\n{\n    \"steps\": \"./step-definitions\",\n    \"pageObjects\": \"./page-objects\",\n    \"sharedObjects\": \"./shared-objects\",\n    \"reports\": \"./reports\",\n    \"browser\": \"chrome\",\n    \"timeout\": 10000\n}\n```\n\nWhereas the following would set configuration to match the expected directory structure of IntelliJ's Cucumber plugin, and make default timeout one minute. _Note that the default browser has not been overridden and will remain 'chrome'._\n\n```json\n{\n    \"steps\": \"./features/step_definitions\",\n    \"pageObjects\": \"./features/page_objects\",\n    \"sharedObjects\": \"./features/shared_objects\",\n    \"reports\": \"./features/reports\",\n    \"timeout\": 60000\n}\n```\n\n### Feature files\n\nA feature file is a [Business Readable, Domain Specific Language](http://martinfowler.com/bliki/BusinessReadableDSL.html) file that lets you describe software’s behavior without detailing how that behavior is implemented. Feature files are written using the [Gherkin syntax](https://github.com/cucumber/cucumber/wiki/Gherkin) and must live in a folder named **features** within the root of your project.\n\n```gherkin\n# ./features/google-search.feature\n\nFeature: Searching for vote cards app\n  As an internet user\n  In order to find out more about the itunes vote cards app\n  I want to be able to search for information about the itunes vote cards app\n\n  Scenario: Google search for vote cards app\n    When I search Google for \"itunes vote cards app\"\n    Then I should see some results\n```\n\n### Browser teardown strategy\n\nThe browser automatically closes after each scenario to ensure the next scenario uses a fresh browser environment. But\nyou can change this behavior with the \"-k\" or the \"--browser-teardown\" parameter.\n\nValue      |  Description\n---------- | ---------------\n`always`   | the browser automatically closes (default)\n`clear`    | the browser automatically clears cookies, local and session storages\n`none`     | the browser does nothing\n\n### Step definitions\n\nStep definitions act as the glue between features files and the actual system under test.\n\n_To avoid confusion **always** return a JavaScript promise your step definition in order to let cucumber know when your task has completed._\n\n```javascript\n// ./step-definitions/google-search-steps.js\n\nmodule.exports = function () {\n\n    this.Then(/^I should see some results$/, function () {\n\n        // driver wait returns a promise so return that\n        return driver.wait(until.elementsLocated(by.css('div.g')), 10000).then(function(){\n\n            // return the promise of an element to the following then.\n            return driver.findElements(by.css('div.g'));\n        })\n        .then(function (elements) {\n\n            // verify this element has children\n            expect(elements.length).to.not.equal(0);\n        });\n    });\n};\n```\n\nThe following variables are available within the ```Given()```, ```When()``` and ```Then()``` functions:\n\n| Variable    | Description |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| `driver`    | an instance of [selenium web driver](http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_WebDriver.html) (_the browser_)\n| `selenium`  | the raw [selenium-webdriver](http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/) module, providing access to static properties/methods\n| `page`      | collection of **page** objects loaded from disk and keyed by filename\n| `shared`    | collection of **shared** objects loaded from disk and keyed by filename\n| `helpers`   | a collection of [helper methods](runtime/helpers.js) _things selenium does not provide but really should!_\n| `by`        | the selenium [By](http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_By.html) class used to locate elements on the page\n| `until`     | the selenium [until](http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/until.html) class used to wait for elements/events\n| `expect`    | instance of [chai expect](http://chaijs.com/api/bdd/) to ```expect('something').to.equal('something')```\n| `assert`    | instance of [chai assert](http://chaijs.com/api/assert/) to ```assert.isOk('everything', 'everything is ok')```\n| `trace`     | handy trace method to log console output with increased visibility\n\n### Page objects\n\nPage objects are accessible via a global ```page``` object and are automatically loaded from ```./page-objects``` _(or the path specified using the ```-p``` switch)_. Page objects are exposed via a camel-cased version of their filename, for example ```./page-objects/google-search.js``` becomes ```page.googleSearch```. You can also use subdirectories, for example ```./page-objects/dir/google-search.js``` becomes ```page.dir.googleSearch```.\n\nPage objects also have access to the same runtime variables available to step definitions.\n\nAn example page object:\n\n```javascript\n// ./page-objects/google-search.js\n\nmodule.exports = {\n\n    url: 'http://www.google.co.uk',\n\n    elements: {\n        searchInput: by.name('q'),\n        searchResultLink: by.css('div.g > h3 > a')\n    },\n\n    /**\n     * enters a search term into Google's search box and presses enter\n     * @param {string} searchQuery\n     * @returns {Promise} a promise to enter the search values\n     */\n    performSearch: function (searchQuery) {\n\n        var selector = page.googleSearch.elements.searchInput;\n\n        // return a promise so the calling function knows the task has completed\n        return driver.findElement(selector).sendKeys(searchQuery, selenium.Key.ENTER);\n    }\n};\n```\n\nAnd its usage within a step definition:\n\n```js\n// ./step-definitions/google-search-steps.js\nthis.When(/^I search Google for \"([^\"]*)\"$/, function (searchQuery) {\n\n    return helpers.loadPage('http://www.google.com').then(function() {\n\n        // use a method on the page object which also returns a promise\n        return page.googleSearch.performSearch(searchQuery);\n    })\n});\n```\n\n### Shared objects\n\nShared objects allow you to share anything from test data to helper methods throughout your project via a global ```shared``` object. Shared objects are automatically loaded from ```./shared-objects``` _(or the path specified using the ```-o``` switch)_ and made available via a camel-cased version of their filename, for example ```./shared-objects/test-data.js``` becomes ```shared.testData```. You can also use subdirectories, for example ```./shared-objects/dir/test-data.js``` becomes ```shared.dir.testData```.\n\n\nShared objects also have access to the same runtime variables available to step definitions.\n\nAn example shared object:\n\n```javascript\n// ./shared-objects/test-data.js\n\nmodule.exports = {\n    username: \"import-test-user\",\n    password: \"import-test-pa**word\"\n}\n```\n\nAnd its usage within a step definition:\n\n```js\nmodule.exports = function () {\n\n    this.Given(/^I am logged in\"$/, function () {\n\n        driver.findElement(by.name('usn')).sendKeys(shared.testData.username);\n        driver.findElement(by.name('pass')).sendKeys(shared.testData.password);\n    });\n};\n```\n\n### Helpers\n\n`selenium-cucumber-js` contains a few helper methods to make working with selenium a bit easier, those methods are:\n\n```js\n// Load a URL, returning only when the <body> tag is present\nhelpers.loadPage('http://www.google.com');\n\n// get the value of a HTML attribute\nhelpers.getAttributeValue('body', 'class');\n\n// get a list of elements matching a query selector who's inner text matches param.\nhelpers.getElementsContainingText('nav[role=\"navigation\"] ul li a', 'Safety Boots');\n\n// get first elements matching a query selector who's inner text matches textToMatch param\nhelpers.getFirstElementContainingText('nav[role=\"navigation\"] ul li a', 'Safety Boots');\n\n// click element(s) that are not visible (useful in situations where a menu needs a hover before a child link appears)\nhelpers.clickHiddenElement('nav[role=\"navigation\"] ul li a','Safety Boots');\n\n// wait until a HTML attribute equals a particular value\nhelpers.waitUntilAttributeEquals('html', 'data-busy', 'false', 5000);\n\n// wait until a HTML attribute exists\nhelpers.waitUntilAttributeExists('html', 'data-busy', 5000);\n\n// wait until a HTML attribute no longer exists\nhelpers.waitUntilAttributeDoesNotExists('html', 'data-busy', 5000);\n\n// get the content value of a :before pseudo element\nhelpers.getPseudoElementBeforeValue('body header');\n\n// get the content value of a :after pseudo element\nhelpers.getPseudoElementAfterValue('body header');\n\n// clear the cookies\nhelpers.clearCookies();\n\n// clear both local and session storages\nhelpers.clearStorages();\n\n// clear both cookies and storages\nhelpers.clearCookiesAndStorages('body header');\n```\n\n### Visual Comparison\n\nThe `selenium-cucumber-js` framework uses [Applitools Eyes](https://applitools.com/) to add visual checkpoints to your JavaScript Selenium tests. It takes care of getting screenshots of your application from the underlying WebDriver, sending them to the Applitools Eyes server for validation and failing the test when differences are detected. To perform visual comparisons within your tests, obtain an [Applitools Eyes](https://applitools.com/) API Key and assign it to the `eye_key` property of the `selenium-cucumber-js.json` config file in the root of your project.\n\nFor example the following configuration could be used with an increased timeout which allows enough time for visual checks:\n\n```json\n{\n  \"eye_key\": \"Your_Api_Key\",\n  \"timeout\": 50000\n}\n```\n\nAnd its usage within page Objects:\n\n```js\nmodule.exports = {\n\n    url: 'https://applitools.com/helloworld',\n\n    elements: {\n        clickme: by.tagName('button'),\n        searchResultLink: by.css('div.g > h3 > a')\n    },\n\n    applitools_Eyes_Example: function () {\n\n        // Start the test and set the browser's viewport size to 800x600.\n        eyes.open(driver, 'Hello World!', 'My first Javascript test!',\n            {width: 800, height: 600});\n\n        // Navigate the browser to the \"hello world!\" web-site.\n        driver.get(page.HelloWorld.elements.url);\n\n        // Visual checkpoint #1.\n        eyes.checkWindow('Main Page');\n\n        // Click the \"Click me!\" button.\n        driver.findElement(page.HelloWorld.elements.clickme).click();\n\n        // Visual checkpoint #2.\n        eyes.checkWindow('Click!');\n\n        // End the test.\n        eyes.close();\n    }\n};\n```\n\n### Before/After hooks\n\nYou can register before and after handlers for features and scenarios:\n\n| Event          | Example\n| -------------- | ------------------------------------------------------------\n| BeforeFeature  | ```this.BeforeFeatures(function(feature, callback) {})```\n| AfterFeature   | ```this.AfterFeature(function(feature, callback) {});```\n| BeforeScenario | ```this.BeforeScenario(function(scenario, callback) {});```\n| AfterScenario  | ```this.AfterScenario(function(scenario, callback) {});```\n\n```js\nmodule.exports = function () {\n\n    // add a before feature hook\n    this.BeforeFeature(function(feature, done) {\n        console.log('BeforeFeature: ' + feature.getName());\n        done();\n    });\n\n    // add an after feature hook\n    this.AfterFeature(function(feature, done) {\n        console.log('AfterFeature: ' + feature.getName());\n        done();\n    });\n\n    // add before scenario hook\n    this.BeforeScenario(function(scenario, done) {\n        console.log('BeforeScenario: ' + scenario.getName());\n        done();\n    });\n\n    // add after scenario hook\n    this.AfterScenario(function(scenario, done) {\n        console.log('AfterScenario: ' + scenario.getName());\n        done();\n    });\n};\n```\n\n### Reports\n\nHTML and JSON reports are automatically generated and stored in the default `./reports` folder. This location can be changed by providing a new path using the `-r` command line switch:\n\n![Cucumber HTML report](img/cucumber-html-report.png)\n\n### How to debug\n\nMost selenium methods return a [JavaScript Promise](https://spring.io/understanding/javascript-promises \"view JavaScript promise introduction\") that is resolved when the method completes. The easiest way to step in with a debugger is to add a ```.then``` method to a selenium function and place a ```debugger``` statement within it, for example:\n\n```js\nmodule.exports = function () {\n\n    this.When(/^I search Google for \"([^\"]*)\"$/, function (searchQuery, done) {\n\n        driver.findElement(by.name('q')).then(function(input) {\n            expect(input).to.exist;\n            debugger; // <<- your IDE should step in at this point, with the browser open\n            return input;\n        })\n        .then(function(input){\n            input.sendKeys(searchQuery);\n            input.sendKeys(selenium.Key.ENTER);\n\n            done(); // <<- let cucumber know you're done\n        });\n    });\n};\n```\n\n### Directory structure\n\nYou can use the framework without any command line arguments if your application uses the following folder structure:\n\n```bash\n.\n├── features\n│   └── google-search.feature\n├── step-definitions\n│   └── google-search-steps.js\n├── page-objects\n│   └── google-search.js\n└── shared-objects\n│   ├── test-data.js\n│   └── stuff.json\n└── reports\n    ├── cucumber-report.json\n    └── cucumber-report.html\n```\n\n## Demo\n\nThis project includes an example to help you get started. You can run the example using the following command:\n\n```bash\nnode ./node_modules/selenium-cucumber-js/index.js\n```\n\n## Bugs\n\nPlease raise bugs via the [selenium-cucumber-js issue tracker](https://github.com/john-doherty/selenium-cucumber-js/issues) and, if possible, please provide enough information to allow the bug to be reproduced.\n\n## Contributing\n\nEveryone is very welcome to contribute to this project. You can contribute just by submitting bugs or suggesting improvements by [opening an issue on GitHub](https://github.com/john-doherty/selenium-cucumber-js/issues).\n\n## Troubleshooting\n\n### IntelliJ Cucumber Plugin\n\nIntelliJ based IDE's have a plugin that allows the tester to control click on a `Given`, `When`, `Then` statement within a Cucumber feature file and have the user taken to the associated step definition. This plugin relies on your project having the following folder structure:\n\n```bash\n.\n└── features\n   │   google-search.feature\n   └── step_definitions\n   │   └── google-search-steps.js\n   └── page_objects\n   │   └── google-search.js\n   └── shared_objects\n   │   ├── test-data.js\n   │   └── stuff.json\n   └── reports\n       ├── cucumber-report.json\n       └── cucumber-report.html\n```\n\nThis can be achieved by restructuring your project to match the layout above _(notice the underscores)_, and running your tests with the following switches:\n\n```bash\nnode ./node_modules/selenium-cucumber-js/index.js -s ./features/step_definitions -p ./features/page_objects -o ./features/shared_objects -r ./features/reports\n```\n\n## License\n\nLicensed under [ISC License](LICENSE) &copy; [John Doherty](https://twitter.com/mrjohndoherty)\n",
  "readmeFilename": "README.MD",
  "repository": {
    "type": "git",
    "url": "git://github.com/john-doherty/selenium-cucumber-js.git"
  },
  "scripts": {
    "test": "node index.js"
  },
  "version": "1.7.1"
}
