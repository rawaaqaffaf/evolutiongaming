{
  "_args": [
    [
      {
        "raw": "electron-prebuilt@^1.4.13",
        "scope": null,
        "escapedName": "electron-prebuilt",
        "name": "electron-prebuilt",
        "rawSpec": "^1.4.13",
        "spec": ">=1.4.13 <2.0.0",
        "type": "range"
      },
      "C:\\Python27\\EvolutionGamingJS\\node_modules\\selenium-cucumber-js"
    ]
  ],
  "_from": "electron-prebuilt@>=1.4.13 <2.0.0",
  "_id": "electron-prebuilt@1.4.13",
  "_inCache": true,
  "_location": "/selenium-cucumber-js/electron-prebuilt",
  "_nodeVersion": "2.2.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/electron-prebuilt-1.4.13.tgz_1482268160891_0.0037630884908139706"
  },
  "_npmUser": {
    "name": "electron",
    "email": "electron@github.com"
  },
  "_npmVersion": "2.15.9",
  "_phantomChildren": {
    "es6-promise": "4.2.8",
    "graceful-fs": "4.2.4",
    "home-path": "1.0.7",
    "klaw": "1.3.1",
    "minimist": "1.2.5",
    "nugget": "2.0.1",
    "path-is-absolute": "1.0.1",
    "pinkie-promise": "2.0.1",
    "rc": "1.2.8",
    "rimraf": "2.7.1",
    "semver": "5.7.1"
  },
  "_requested": {
    "raw": "electron-prebuilt@^1.4.13",
    "scope": null,
    "escapedName": "electron-prebuilt",
    "name": "electron-prebuilt",
    "rawSpec": "^1.4.13",
    "spec": ">=1.4.13 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/selenium-cucumber-js"
  ],
  "_resolved": "https://registry.npmjs.org/electron-prebuilt/-/electron-prebuilt-1.4.13.tgz",
  "_shasum": "0a0e4d7bf895a242061ccfab29394dcda1da33d2",
  "_shrinkwrap": null,
  "_spec": "electron-prebuilt@^1.4.13",
  "_where": "C:\\Python27\\EvolutionGamingJS\\node_modules\\selenium-cucumber-js",
  "author": {
    "name": "Mathias Buus"
  },
  "bin": {
    "electron": "cli.js"
  },
  "bugs": {
    "url": "https://github.com/electron-userland/electron-prebuilt/issues"
  },
  "dependencies": {
    "electron-download": "^3.0.1",
    "extract-zip": "^1.0.3"
  },
  "deprecated": "electron-prebuilt has been renamed to electron. For more details, see http://electron.atom.io/blog/2016/08/16/npm-install-electron",
  "description": "Install prebuilt electron binaries for the command-line using npm",
  "devDependencies": {
    "home-path": "^0.1.1",
    "path-exists": "^2.0.0",
    "standard": "^5.4.1",
    "tape": "^3.0.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "0a0e4d7bf895a242061ccfab29394dcda1da33d2",
    "tarball": "https://registry.npmjs.org/electron-prebuilt/-/electron-prebuilt-1.4.13.tgz"
  },
  "homepage": "https://github.com/electron-userland/electron-prebuilt#readme",
  "keywords": [
    "electron"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "electron",
      "email": "electron@github.com"
    }
  ],
  "name": "electron-prebuilt",
  "optionalDependencies": {},
  "readme": "# electron-prebuilt\n\n[![Travis build status](http://img.shields.io/travis/electron-userland/electron-prebuilt.svg?style=flat)](http://travis-ci.org/electron-userland/electron-prebuilt)\n[![AppVeyor build status](https://ci.appveyor.com/api/projects/status/qd978ky9axl8m1m1?svg=true)](https://ci.appveyor.com/project/Atom/electron-prebuilt)\n\n[![badge](https://nodei.co/npm/electron-prebuilt.png?downloads=true)](https://www.npmjs.com/package/electron-prebuilt)\n\nInstall [Electron](https://github.com/electron/electron) prebuilt binaries for\ncommand-line use using npm. This module helps you easily install the `electron`\ncommand for use on the command line without having to compile anything.\n\n[Electron](http://electron.atom.io) is a JavaScript runtime that bundles Node.js\nand Chromium. You use it similar to the `node` command on the command line for\nexecuting JavaScript programs. For more info you can read [this intro blog post](http://maxogden.com/electron-fundamentals.html)\nor dive into the [Electron documentation](http://electron.atom.io/docs).\n\n## Installation\n\n**Note** As of version 1.3.1, this package is published to npm under two names:\n`electron` and `electron-prebuilt`. You can currently use either name, but\n`electron` is recommended, as the `electron-prebuilt` name is deprecated, and\nwill only be published until the end of 2016.\n\nDownload and install the latest build of Electron for your OS and add it to your\nproject's `package.json` as a `devDependency`:\n\n```shell\nnpm install electron --save-dev\n```\n\nThis is the preferred way to use Electron, as it doesn't require users to\ninstall Electron globally.\n\nYou can also use the `-g` flag (global) to symlink it into your PATH:\n\n```shell\nnpm install -g electron\n```\n\nIf that command fails with an `EACCESS` error you may have to run it again with `sudo`:\n\n```shell\nsudo npm install -g electron\n```\n\nNow you can just run `electron` to run electron:\n\n```shell\nelectron\n```\n\nIf you need to use an HTTP proxy you can [set these environment variables](https://github.com/request/request/tree/f0c4ec061141051988d1216c24936ad2e7d5c45d#controlling-proxy-behaviour-using-environment-variables).\n\nIf you want to change the architecture that is downloaded (e.g., `ia32` on an\n`x64` machine), you can use the `--arch` flag with npm install or set the\n`npm_config_arch` environment variable:\n\n```shell\nnpm install --arch=ia32 electron\n```\n\n## About\n\nWorks on Mac, Windows and Linux OSes that Electron supports (e.g. Electron\n[does not support Windows XP](https://github.com/electron/electron/issues/691)).\n\nThe version numbers of this module match the version number of the [official\nElectron releases](https://github.com/electron/electron/releases), which\n[do not follow semantic versioning](http://electron.atom.io/docs/tutorial/electron-versioning/).\n\nThis module is automatically released whenever a new version of Electron is\nreleased thanks to [electron-prebuilt-updater](https://github.com/electron/electron-prebuilt-updater),\noriginally written by [John Muhl](https://github.com/johnmuhl/).\n\n## Usage\n\nFirst, you have to [write an Electron application](http://electron.atom.io/docs/tutorial/quick-start/).\n\nThen, you can run your app using:\n\n```shell\nelectron your-app/\n```\n\n## Related modules\n\n- [electron-packager](https://github.com/electron-userland/electron-packager) -\n  Package and distribute your Electron app with OS-specific bundles\n  (.app, .exe etc)\n- [electron-builder](https://github.com/electron-userland/electron-builder) -\n  create installers\n- [menubar](https://github.com/maxogden/menubar) - high level way to create\n  menubar desktop applications with electron\n\nFind more at the [awesome-electron](https://github.com/sindresorhus/awesome-electron) list.\n\n## Programmatic usage\n\nMost people use this from the command line, but if you require `electron` inside\nyour **Node app** (not your Electron app) it will return the file path to the\nbinary. Use this to spawn Electron from Node scripts:\n\n```javascript\nvar electron = require('electron')\nvar proc = require('child_process')\n\n// will print something similar to /Users/maf/.../Electron\nconsole.log(electron)\n\n// spawn Electron\nvar child = proc.spawn(electron)\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/electron-userland/electron-prebuilt.git"
  },
  "scripts": {
    "cache-clean": "rm -rf ~/.electron && rm -rf dist",
    "postinstall": "node install.js",
    "pretest": "npm run cache-clean && npm run postinstall",
    "test": "tape test/*.js && standard"
  },
  "version": "1.4.13"
}
