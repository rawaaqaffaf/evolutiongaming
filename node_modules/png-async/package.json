{
  "_args": [
    [
      {
        "raw": "png-async@^0.9.2",
        "scope": null,
        "escapedName": "png-async",
        "name": "png-async",
        "rawSpec": "^0.9.2",
        "spec": ">=0.9.2 <0.10.0",
        "type": "range"
      },
      "C:\\Python27\\EvolutionGamingJS\\node_modules\\eyes.utils"
    ]
  ],
  "_from": "png-async@^0.9.2",
  "_hasShrinkwrap": false,
  "_id": "png-async@0.9.4",
  "_location": "/png-async",
  "_nodeVersion": "10.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/png-async_0.9.4_1551700782987_0.6401373582213676"
  },
  "_npmUser": {
    "name": "kanreisa",
    "email": "root@pixely.jp"
  },
  "_npmVersion": "6.7.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "png-async@^0.9.2",
    "scope": null,
    "escapedName": "png-async",
    "name": "png-async",
    "rawSpec": "^0.9.2",
    "spec": ">=0.9.2 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eyes.utils"
  ],
  "_resolved": "https://registry.npmjs.org/png-async/-/png-async-0.9.4.tgz",
  "_shasum": "0638817508fcf4e732706b2f82c74c947cb83f78",
  "_shrinkwrap": null,
  "_spec": "png-async@^0.9.2",
  "_where": "C:\\Python27\\EvolutionGamingJS\\node_modules\\eyes.utils",
  "author": {
    "name": "Yuki KAN",
    "email": "re@pixely.jp",
    "url": "https://github.com/kanreisa"
  },
  "bugs": {
    "url": "https://github.com/kanreisa/node-png-async/issues"
  },
  "contributors": [
    {
      "name": "niegowski"
    },
    {
      "name": "brighthas"
    },
    {
      "name": "steelsojka"
    }
  ],
  "dependencies": {},
  "description": "A simple and non-blocking PNG encoder / decoder.",
  "devDependencies": {
    "@types/node": "^8.10.39",
    "mocha": "^5.2.0",
    "rimraf": "^2.6.2",
    "should": "^5.0.1",
    "typescript": "^2.9.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-B//AXX9TkneKfgtOpT1mdUnnhk2BImGD+a98vImsMU8uo1dBeHyW/kM2erWZ/CsYteTPU/xKG+t6T62heHkC3A==",
    "shasum": "0638817508fcf4e732706b2f82c74c947cb83f78",
    "tarball": "https://registry.npmjs.org/png-async/-/png-async-0.9.4.tgz",
    "fileCount": 24,
    "unpackedSize": 84138,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcfRMvCRA9TVsSAnZWagAABpEQAKKXYKmFnvq3RR+3DWLw\n7a9Z0sP0BxCfMjheWbeBV9M7AkeRG1HrR+Y/yUlRfBWKpdKPvTpt1FNSNJrl\nZ/t0u/TW11ZwX8Nx6jeMmGbtUabwMOmI6MZ/64d/EJ+RzJoGoum0epztJYJ8\nvJawOrh2AZDkYhxdCGaT7VtQ8iTKi1h1eG0WB3mDcRyTZgS8Qi9UHyCmwXS5\noYlP6zU1+u7nBTowipbPy5+SJuS+hW8FfahVrsxppWAqrbjwjH3+ZGydIbun\nl1+iCHOCavcdljrG0YSc3UvLSgWbc4IyfMkalXg6p3GLMCxGImVwBZgwjwdW\nu94duydEP9FBN3xRDyXOEjXtbm2AVRLTvihkUtvdmgnEc8jSdoUPULdDZqVK\nL7tmfUDi0XvIQdevsNudlS/Z6ZHBaKiUUoYMZ4jIggtTgGlXnn4cXfpLClyT\nTQwAYfUm2ABY1uNpaHbUNBEL7SitviFGdIEIEt8W5VfPp1LrbMFZouK67T1e\nPufhGQV3lnFWo9xZDi6GTy0xP6RZpxUkKTfsTSdScgOkHTHUooVSukCKP26X\nnxaPU0ePQeyvmePqN7lRUe2dO/ftgJIHHWfVg2MHFhWAdNz2NN/dM2jNRltz\nELc0e5QihXeXtkLxUEnBSBCNs+OkwGYJkiHlY+Khyf9jz1KcwPdJIyRjPk/7\nn6uJ\r\n=87AI\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "aff5950883ab29d57043e959e871a07963526b71",
  "homepage": "https://github.com/kanreisa/node-png-async",
  "keywords": [
    "png",
    "stream",
    "async",
    "non-blocking"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "kanreisa",
      "email": "root@kpx.jp"
    }
  ],
  "name": "png-async",
  "optionalDependencies": {},
  "readme": "# png-async\r\nA simple and **non-blocking** PNG encoder / decoder for Node.\r\n\r\n[![npm version][npm-img]][npm-url]\r\n[![Linux Build][travis-img]][travis-url]\r\n[![Windows Build][appveyor-img]][appveyor-url]\r\n[![devDependency Status][devdep-img]][devdep-url]\r\n\r\nforked from [node-png](https://github.com/leogiese/node-png).\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install png-async --save\r\n```\r\n\r\n## Build (for Developers)\r\n\r\n```bash\r\n$ git clone https://github.com/kanreisa/node-png-async.git\r\n$ cd node-png-async\r\n$ npm install\r\n$ npm run build\r\n$ npm run test\r\n```\r\n\r\n## Example\r\n\r\n```js\r\nvar fs = require('fs');\r\nvar png = require('png-async');\r\n\r\nfs.createReadStream('in.png')\r\n    .pipe(png.createImage({\r\n        filterType: 4\r\n    }))\r\n    .on('parsed', function () {\r\n\r\n        // Note: this is blocking. be careful.\r\n        for (var y = 0; y < this.height; y++) {\r\n            for (var x = 0; x < this.width; x++) {\r\n                var idx = (this.width * y + x) << 2;\r\n\r\n                // invert color\r\n                this.data[idx] = 255 - this.data[idx];\r\n                this.data[idx+1] = 255 - this.data[idx+1];\r\n                this.data[idx+2] = 255 - this.data[idx+2];\r\n\r\n                // and reduce opacity\r\n                this.data[idx+3] = this.data[idx+3] >> 1;\r\n            }\r\n        }\r\n\r\n        this.pack().pipe(fs.createWriteStream('out.png'));\r\n    });\r\n```\r\nFor more examples see `examples` folder.\r\n\r\n## Documentation\r\n\r\nAs input any color type is accepted (grayscale, rgb, palette, grayscale with alpha, rgb with alpha) but 8 bit per sample (channel) is the only supported bit depth. Interlaced mode is not supported.\r\n\r\n#### Supported ancillary chunks\r\n* `gAMA` - gamma,\r\n* `tRNS` - transparency (but only for paletted image)\r\n\r\n### Class: Image\r\n\r\n`Image` is readable and writable `Stream`.\r\n\r\n#### Options\r\n\r\n- `width` - use this with `height` if you want to create png from scratch\r\n- `height` - as above\r\n- `checkCRC` - whether parser should be strict about checksums in source stream (default: `true`)\r\n- `deflateChunkSize` - chunk size used for deflating data chunks, this should be power of 2 and must not be less than 256 and more than 32*1024 (default: 32 kB)\r\n- `deflateLevel` - compression level for delate (default: 9)\r\n- `deflateStrategy` - compression strategy for delate (default: 3)\r\n- `filterType` - png filtering method for scanlines (default: -1 => auto, accepts array of numbers 0-4)\r\n\r\n#### Event \"metadata\"\r\n\r\n`function(metadata) { }`\r\nImage's header has been parsed, metadata contains this information:\r\n- `width` image size in pixels\r\n- `height` image size in pixels\r\n- `palette` image is paletted\r\n- `color` image is not grayscale\r\n- `alpha` image contains alpha channel\r\n\r\n#### Event: \"parsed\"\r\n\r\n`function(data) { }`\r\nInput image has been completly parsed, `data` is complete and ready for modification.\r\n\r\n\r\n#### Event: \"error\"\r\n\r\n`function(error) { }`\r\n\r\n#### Image#parse(data: Buffer, callback?: (err: Error, image: Image) => void): Image\r\n\r\nParses PNG file data. Alternatively you can stream data to instance of PNG.\r\n\r\nOptional `callback` is once called on `error` or `parsed`. The callback gets\r\ntwo arguments `(err, data)`.\r\n\r\nReturns `this` for method chaining.\r\n\r\n#### Image#pack(): Image\r\n\r\nStarts converting data to PNG file Stream.\r\n\r\nReturns `this` for method chaining.\r\n\r\n\r\n#### Image#bitblt(dst: Image, sx: number, sy: number, w: number, h: number, dx: number, dy: number): Image\r\n\r\nHelper for image manipulation, copies rectangle of pixels from current image (`sx`, `sy`, `w`, `h`) to `dst` image (at `dx`, `dy`).\r\n\r\nReturns `this` for method chaining.\r\n\r\n\r\n#### Image#width: number\r\n\r\nWidth of image in pixels\r\n\r\n\r\n#### Image#height: number\r\n\r\nHeight of image in pixels\r\n\r\n\r\n#### Image#data: Buffer\r\n\r\nBuffer of image pixel data. Every pixel consists 4 bytes: R, G, B, A (opacity).\r\n\r\n\r\n#### Image#gamma: number\r\n\r\nGamma of image (0 if not specified)\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-img]: https://img.shields.io/npm/v/png-async.svg\r\n[npm-url]: https://npmjs.org/package/png-async\r\n[travis-img]: https://img.shields.io/travis/kanreisa/node-png-async.svg\r\n[travis-url]: https://travis-ci.org/kanreisa/node-png-async\r\n[appveyor-img]: https://img.shields.io/appveyor/ci/kanreisa/node-png-async.svg\r\n[appveyor-url]: https://ci.appveyor.com/project/kanreisa/node-png-async\r\n[devdep-img]: https://david-dm.org/kanreisa/node-png-async/dev-status.svg\r\n[devdep-url]: https://david-dm.org/kanreisa/node-png-async#info=devDependencies\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kanreisa/node-png-async.git"
  },
  "scripts": {
    "build": "tsc --declaration",
    "clean": "rimraf lib/*",
    "prepublishOnly": "npm run clean && npm run build",
    "test": "mocha --exit test/*.js",
    "watch": "tsc -w --declaration"
  },
  "types": "lib/index.d.ts",
  "version": "0.9.4"
}
