{
  "_args": [
    [
      {
        "raw": "one-time@^1.0.0",
        "scope": null,
        "escapedName": "one-time",
        "name": "one-time",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "C:\\Python27\\EvolutionGamingJS\\node_modules\\winston"
    ]
  ],
  "_from": "one-time@^1.0.0",
  "_hasShrinkwrap": false,
  "_id": "one-time@1.0.0",
  "_location": "/one-time",
  "_nodeVersion": "8.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/one-time_1.0.0_1557098998565_0.8127709342319505"
  },
  "_npmUser": {
    "name": "3rdeden",
    "email": "npm@3rd-Eden.com"
  },
  "_npmVersion": "6.4.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "one-time@^1.0.0",
    "scope": null,
    "escapedName": "one-time",
    "name": "one-time",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/winston"
  ],
  "_resolved": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
  "_shasum": "e06bc174aed214ed58edede573b433bbf827cb45",
  "_shrinkwrap": null,
  "_spec": "one-time@^1.0.0",
  "_where": "C:\\Python27\\EvolutionGamingJS\\node_modules\\winston",
  "author": {
    "name": "Arnout Kazemier"
  },
  "bugs": {
    "url": "https://github.com/3rd-Eden/one-time/issues"
  },
  "dependencies": {
    "fn.name": "1.x.x"
  },
  "description": "Run the supplied function exactly one time (once)",
  "devDependencies": {
    "assume": "^2.2.0",
    "mocha": "^6.1.4",
    "nyc": "^14.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==",
    "shasum": "e06bc174aed214ed58edede573b433bbf827cb45",
    "tarball": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
    "fileCount": 5,
    "unpackedSize": 6089,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcz3H3CRA9TVsSAnZWagAA4gIP/0Gxgv1IRvRobwpLWqhc\n7Uq2PZsyYxKZTPkpxGA/pOWWJFnFS99EeX9DwnW7g1+TJhVaLjTeDjTlQNcs\ntrIdhBxzjyZ0S+/ZiRk0c4Va/cqqHySQHyiPxksS065i3yuNb4tLulLdj01c\nypr2emYcKSwg/0NIzF1UIMk3hoYCIu+wYDzWL7gQP/zQW0ikQmKSNt+jvr8U\nSDX8vsl9Jz2/KD9SD19yUFeLvbSmGCE13U+yDByQTWFwK/Dv5E7GOJbVjxh0\n53OiGg+gA0rLQYOU4dbwGN2vz0JNxI0K2hwrovocMQ+HUVycBG4mV8M/BGbd\nIPKpkGkICvkKnsb6IDuz1Hm1gCoVeWF7oycdKpucmgiLGWOdmNVgxRbXknGd\nJSk8KXw6qpF7fNTUB+fUDhr2RUI29DaPeZw1xcXAhk3LFUqkCHXE9jqU0M6z\nvZOmP3whJfNiQGL4spj+9kUssPIIIY+1yJDP450Jyw8PbdEvAUC033RGxuKq\nBCHrsc/6cLryz2IqL8B11Vr6EoW/Cq+smJ78+4XTu3jyEX9PBzrrTQX47PXE\nMUA5t+0ntzfcIDeRImMU60U63jDX3wyevTYAR9YaxwNV38S7l7mTPJmw17qD\nIX6AT4h8JK2PG+umke07NNNSfrWgf8pHMeBwgzPVNv1Z38FL3bZi4l76vEyq\np19g\r\n=Rwb6\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "aa7ced4ad6c65b1f5433b4c9fefb3b809adee5fc",
  "homepage": "https://github.com/3rd-Eden/one-time#readme",
  "keywords": [
    "once",
    "function",
    "single",
    "one",
    "one-time",
    "execution",
    "nope"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "3rdeden",
      "email": "npm@3rd-Eden.com"
    },
    {
      "name": "unshift",
      "email": "npm@unshift.io"
    },
    {
      "name": "v1",
      "email": "npm@3rd-Eden.com"
    }
  ],
  "name": "one-time",
  "optionalDependencies": {},
  "readme": "# one-time\n\nCall the supplied function exactly one time. This prevents double callback\nexecution. This module can be used on both Node.js, React-Native, or browsers\nusing Browserify. No magical ES5/6 methods used unlike the `once` module does\n(except for the async version).\n\n## Installation\n\nThis module is published to the public npm registry and can be installed\nby running:\n\n```sh\nnpm install --save one-time\n```\n\n## Usage (normal)\n\nSimply supply the function with the function that should only be called one\ntime:\n\n```js\nvar one = require('one-time');\n\nfunction load(file, fn) {\n  fn = one(fn);\n\n  eventemitter.once('load', fn);\n  eventemitter.once('error', fn);\n\n  // do stuff\n  eventemitter.emit('error', new Error('Failed to load, but still finished'));\n  eventemitter.emit('load');\n}\n\nfunction example(fn) {\n  fn = one(fn);\n\n  fn();\n  fn('also receives all arguments');\n  fn('it returns the same value') === 'bar';\n  fn('never');\n  fn('gonna');\n  fn('give');\n  fn('you');\n  fn('up');\n}\n\nexample(function () {\n  return 'bar'\n});\n```\n\n## Usage (async)\n\nThe same pattern is available for **async** functions as well, for that you\nshould import that `one-time/async` version instead. This one is optimized\nfor **async** and **await** support. It following exactly the same as the\nnormal version but assumes it's an `async function () {}` that it's wrapping\ninstead of a regular function, and it will return an `async function() {}`\ninstead of a regular function.\n\n```js\nimport one from 'one-time/async';\n\nconst fn = one(async function () {\n  return await example();\n});\n\nawait fn();\nawait fn();\nawait fn();\n```\n\n### Why not `once`?\n\nThe main reason is that `once` cannot be used in a browser environment unless\nit's ES5 compatible. For a module as simple as this I find that unacceptable. In\naddition to that it super heavy on the dependency side. So it's totally not\nsuitable to be used in client side applications.\n\nIn addition to that we make sure that your code stays easy to debug as returned\nfunctions are named in the same way as your supplied functions. Making heap\ninspection and stack traces easier to understand.\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/3rd-Eden/one-time.git"
  },
  "scripts": {
    "test": "nyc --reporter=text --reporter=json-summary npm run test:runner",
    "test:runner": "mocha test.js",
    "test:watch": "npm run test:runner -- --watch"
  },
  "version": "1.0.0"
}
